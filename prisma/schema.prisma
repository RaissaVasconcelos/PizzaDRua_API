// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  phone     String?
  password  String
  Address   Address[]
  Order     Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Address {
  id             String       @id @default(uuid())
  customer       Customer     @relation(fields: [customerId], references: [id])
  customerId     String
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String
  type           String
  street         String
  number         String
  zipCode        String
  phone          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
}

model Neighborhood {
  id        String    @id @default(uuid())
  name      String
  rate      String
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}


model Category {
  id      String    @id @default(uuid())
  name    String
  Product Product[]
}
model Product {
  id           String         @id @default(uuid())
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  name         String
  image        String
  type         TYPEPIZZA?     @default(TRADITIONAL)
  size         String
  description  String
  price        String
  Order        Order[]
  ProductOrder ProductOrder[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
}

model ProductOrder {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  String
}

model Order {
  id           String         @id @default(uuid())
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   String
  status       String
  total        String?
  ProductOrder ProductOrder[]
  Product      Product?       @relation(fields: [productId], references: [id])
  productId    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
}

enum TYPEPIZZA {
  TRADITIONAL
  SPECIAL
}
